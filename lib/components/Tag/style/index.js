"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagGroupWrapper = exports.IconTagWrapper = exports.IconTag = exports.ContentWrapper = exports.TagWrapper = exports.PrefixIconWrapper = exports.PrefixIcon = exports.CloseIconWrapper = exports.CloseIcon = exports.styleMap = exports.iconCls = exports.prefixCls = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _config = _interopRequireDefault(require("../../../config"));

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _Icon = _interopRequireDefault(require("../../../components/Icon"));

var _withProps = _interopRequireDefault(require("../../../utils/withProps"));

var _this = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-tag';
exports.prefixCls = prefixCls;
var iconCls = _prefixCls + '-tag-icon';
exports.iconCls = iconCls;
var styleMap = {
  gray: {
    color: 'T_COLOR_TEXT_DEFAULT_LIGHT',
    border: 'T_COLOR_LINE_NOTICE_LIGHT',
    bg: 'T_COLOR_BG_NOTICE_LIGHT',
    iconHoverBG: 'T_COLOR_BG_NOTICE_DARK'
  },
  green: {
    color: 'T_COLOR_TEXT_SUCCESS',
    border: 'T_COLOR_LINE_SUCCESS_LIGHT',
    bg: 'T_COLOR_BG_SUCCESS_LIGHT',
    iconHoverBG: 'T_COLOR_BG_SUCCESS_DARK'
  },
  yellow: {
    color: 'T_COLOR_TEXT_WARNING',
    border: 'T_COLOR_LINE_WARNING_LIGHT',
    bg: 'T_COLOR_BG_WARNING_LIGHT',
    iconHoverBG: 'T_COLOR_BG_WARNING_DARK'
  },
  red: {
    color: 'T_COLOR_TEXT_ERROR',
    border: 'T_COLOR_LINE_ERROR_LIGHT',
    bg: 'T_COLOR_BG_ERROR_LIGHT',
    iconHoverBG: 'T_COLOR_BG_ERROR_DARK'
  },
  primary: {
    color: 'T_COLOR_TEXT_SYSTEM_WHITE',
    border: 'T_COLOR_LINE_PRIMARY_DEFAULT',
    bg: 'T_COLOR_BG_PRIMARY_1',
    iconHoverBG: 'T_COLOR_BG_PRIMARY_2'
  },
  purple: {
    color: 'T_COLOR_LEGEND_PURPLE_5',
    border: 'T_COLOR_LEGEND_PURPLE_2',
    bg: 'T_COLOR_LEGEND_PURPLE_1',
    iconHoverBG: 'T_COLOR_LEGEND_PURPLE_5'
  },
  lightblue: {
    color: 'T_COLOR_LEGEND_LIGHTBLUE_5',
    border: 'T_COLOR_LEGEND_LIGHTBLUE_2',
    bg: 'T_COLOR_LEGEND_LIGHTBLUE_1',
    iconHoverBG: 'T_COLOR_LEGEND_LIGHTBLUE_5'
  },
  blue: {
    color: 'T_COLOR_LEGEND_BLUE_5',
    border: 'T_COLOR_LEGEND_BLUE_2',
    bg: 'T_COLOR_LEGEND_BLUE_1',
    iconHoverBG: 'T_COLOR_LEGEND_BLUE_5'
  },
  orange: {
    color: 'T_COLOR_LEGEND_ORANGE_5',
    border: 'T_COLOR_LEGEND_ORANGE_2',
    bg: 'T_COLOR_LEGEND_ORANGE_1',
    iconHoverBG: 'T_COLOR_LEGEND_ORANGE_5'
  },
  cyan: {
    color: 'T_COLOR_LEGEND_CYAN_5',
    border: 'T_COLOR_LEGEND_CYAN_2',
    bg: 'T_COLOR_LEGEND_CYAN_1',
    iconHoverBG: 'T_COLOR_LEGEND_CYAN_5'
  }
};
exports.styleMap = styleMap;
[['default', 'gray'], ['success', 'green'], ['warning', 'yellow'], ['error', 'red']].map(function (_ref) {
  (0, _newArrowCheck2.default)(this, _this);

  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      styleType = _ref2[0],
      color = _ref2[1];

  styleMap[styleType] = styleMap[color];
}.bind(void 0));
var filledStyleMap = {
  purple: {
    bg: 'T_COLOR_LEGEND_PURPLE_6',
    iconHoverBG: 'T_COLOR_LEGEND_PURPLE_7'
  },
  lightblue: {
    bg: 'T_COLOR_LEGEND_LIGHTBLUE_6',
    iconHoverBG: 'T_COLOR_LEGEND_LIGHTBLUE_7'
  },
  blue: {
    bg: 'T_COLOR_LEGEND_BLUE_6',
    iconHoverBG: 'T_COLOR_LEGEND_BLUE_7'
  },
  orange: {
    bg: 'T_COLOR_LEGEND_ORANGE_6',
    iconHoverBG: 'T_COLOR_LEGEND_ORANGE_7'
  },
  yellow: {
    bg: 'T_COLOR_LEGEND_YELLOW_6',
    iconHoverBG: 'T_COLOR_LEGEND_YELLOW_7'
  },
  cyan: {
    bg: 'T_COLOR_LEGEND_CYAN_6',
    iconHoverBG: 'T_COLOR_LEGEND_CYAN_7'
  },
  red: {
    bg: 'T_COLOR_LEGEND_RED_6',
    iconHoverBG: 'T_COLOR_LEGEND_RED_7'
  }
};
Object.keys(filledStyleMap).map(function (key) {
  (0, _newArrowCheck2.default)(this, _this);
  var map = filledStyleMap[key];
  styleMap[key + '-filled'] = _objectSpread(_objectSpread({}, map), {}, {
    border: map.bg,
    color: 'T_COLOR_TEXT_SYSTEM_WHITE'
  });
}.bind(void 0));
var CloseIcon = ( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "e19zfbcx0",
  label: "CloseIcon"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.CloseIcon = CloseIcon;
var CloseIconWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx1",
  label: "CloseIconWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.CloseIconWrapper = CloseIconWrapper;
var PrefixIcon = ( /*#__PURE__*/0, _styledBase.default)(_Icon.default, {
  target: "e19zfbcx2",
  label: "PrefixIcon"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSXNDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9JY29uJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGFnJztcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gX3ByZWZpeENscyArICctdGFnLWljb24nO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVNYXAgPSB7XG4gICAgZ3JheToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19OT1RJQ0VfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfTk9USUNFX0RBUksnXG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX1NVQ0NFU1NfTElHSFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfU1VDQ0VTU19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19TVUNDRVNTX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9XQVJOSU5HX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX1dBUk5JTkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfV0FSTklOR19EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0VSUk9SX0RBUksnXG4gICAgfSxcbiAgICBwcmltYXJ5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9QUklNQVJZX0RFRkFVTFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfUFJJTUFSWV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX1BSSU1BUllfMidcbiAgICB9LFxuICAgIHB1cnBsZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfUFVSUExFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNSdcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfTElHSFRCTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNSdcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfMScsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9MRUdFTkRfQkxVRV81J1xuICAgIH0sXG4gICAgb3JhbmdlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzEnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV81J1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfQ1lBTl8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzUnXG4gICAgfVxufTtcblxuW1xuICAgIFsnZGVmYXVsdCcsICdncmF5J10sXG4gICAgWydzdWNjZXNzJywgJ2dyZWVuJ10sXG4gICAgWyd3YXJuaW5nJywgJ3llbGxvdyddLFxuICAgIFsnZXJyb3InLCAncmVkJ11cbl0ubWFwKChbc3R5bGVUeXBlLCBjb2xvcl0pID0+IHtcbiAgICBzdHlsZU1hcFtzdHlsZVR5cGVdID0gc3R5bGVNYXBbY29sb3JdO1xufSk7XG5cbmNvbnN0IGZpbGxlZFN0eWxlTWFwID0ge1xuICAgIHB1cnBsZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNydcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfNydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfNydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1lFTExPV182JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9ZRUxMT1dfNydcbiAgICB9LFxuICAgIGN5YW46IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1JFRF82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9SRURfNydcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhmaWxsZWRTdHlsZU1hcCkubWFwKGtleSA9PiB7XG4gICAgY29uc3QgbWFwID0gZmlsbGVkU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWZpbGxlZCddID0ge1xuICAgICAgICAuLi5tYXAsXG4gICAgICAgIGJvcmRlcjogbWFwLmJnLFxuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEUnXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkKFN2Z0ljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgUHJlZml4SWNvbiA9IHN0eWxlZChJY29uKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBQcmVmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5jb25zdCBnZXRDb2xvck1hcCA9IChzdHlsZVR5cGUsIGRpc2FibGVkKSA9PiB7XG4gICAgaWYgKC8tZmlsbCQvLnRlc3Qoc3R5bGVUeXBlKSkge1xuICAgICAgICBzdHlsZVR5cGUgKz0gJ2VkJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0RJU0FCTEVEJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9ESVNBQkxFRF9MSUdIVCcsXG4gICAgICAgICAgICAgICAgICBiZzogJ1RfQ09MT1JfQkdfRElTQUJMRURfTElHSFQnLFxuICAgICAgICAgICAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHN0eWxlTWFwW3N0eWxlVHlwZV0pIHx8IHt9XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlXG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIGNvbnN0IGljb25Ib3ZlckJHID0gY3VzdG9tU3R5bGU/LmNsb3NlSWNvbkhvdmVyQmFja2dyb3VuZCB8fCBEVFtjb2xvck1hcC5pY29uSG92ZXJCR107XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuXG4gICAgICAgICAgICAke1ByZWZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtDbG9zZUljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMnB4IDJweCAwO1xuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmICdjdXJzb3I6IHBvaW50ZXInfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuXG4gICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtpY29uSG92ZXJCR307XG4gICAgICAgICAgICAgICAgICAgICAgICAke0Nsb3NlSWNvbn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBJY29uVGFnID0gc3R5bGVkKEljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuZXhwb3J0IGNvbnN0IEljb25UYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlID0gJ2RlZmF1bHQnLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBjdXN0b21TdHlsZVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMCBzb2xpZCAke2JnfTtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDVweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnR3JvdXBXcmFwcGVyID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY29tcGFjdCB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhY3RcbiAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTRweDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */");
exports.PrefixIcon = PrefixIcon;
var PrefixIconWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx3",
  label: "PrefixIconWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.PrefixIconWrapper = PrefixIconWrapper;

var getColorMap = function getColorMap(styleType, disabled) {
  (0, _newArrowCheck2.default)(this, _this);

  if (/-fill$/.test(styleType)) {
    styleType += 'ed';
  }

  return (disabled ? {
    color: 'T_COLOR_TEXT_DISABLED',
    border: 'T_COLOR_LINE_DISABLED_LIGHT',
    bg: 'T_COLOR_BG_DISABLED_LIGHT',
    iconHoverBG: 'T_COLOR_BG_DISABLED_LIGHT'
  } : styleMap[styleType]) || {};
}.bind(void 0);

var TagWrapper = (0, _withProps.default)({
  className: prefixCls
})(( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx4",
  label: "TagWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var styleType = props.styleType,
      disabled = props.disabled,
      DT = props.theme.designTokens,
      customStyle = props.customStyle;
  var colorMap = getColorMap(styleType, disabled);
  var color = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.color) || DT[colorMap.color];
  var bg = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.background) || DT[colorMap.bg];
  var border = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.borderColor) || DT[colorMap.border];
  var iconHoverBG = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.closeIconHoverBackground) || DT[colorMap.iconHoverBG];
  return /*#__PURE__*/(0, _core.css)("box-sizing:border-box;height:20px;padding-left:8px;border-radius:2px;display:inline-flex;align-items:center;color:", color, ";background:", bg, ";border:1px solid ", border, ";", PrefixIconWrapper, "{margin-right:4px;line-height:18px;flex-shrink:0;}", ContentWrapper, "{margin-right:8px;line-height:18px;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}", CloseIconWrapper, "{float:right;width:18px;height:18px;line-height:18px;font-size:0;text-align:center;border-radius:0 2px 2px 0;", !disabled && 'cursor: pointer', ";color:", color, ";transition:background 0.3s;flex-shrink:0;", CloseIcon, "{fill:", color, ";}", !disabled && /*#__PURE__*/(0, _core.css)(":hover{background:", iconHoverBG, ";", CloseIcon, "{fill:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}};label:TagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvTm1CIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9JY29uJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGFnJztcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gX3ByZWZpeENscyArICctdGFnLWljb24nO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVNYXAgPSB7XG4gICAgZ3JheToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19OT1RJQ0VfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfTk9USUNFX0RBUksnXG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX1NVQ0NFU1NfTElHSFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfU1VDQ0VTU19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19TVUNDRVNTX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9XQVJOSU5HX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX1dBUk5JTkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfV0FSTklOR19EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0VSUk9SX0RBUksnXG4gICAgfSxcbiAgICBwcmltYXJ5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9QUklNQVJZX0RFRkFVTFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfUFJJTUFSWV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX1BSSU1BUllfMidcbiAgICB9LFxuICAgIHB1cnBsZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfUFVSUExFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNSdcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfTElHSFRCTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNSdcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfMScsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9MRUdFTkRfQkxVRV81J1xuICAgIH0sXG4gICAgb3JhbmdlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzEnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV81J1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfQ1lBTl8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzUnXG4gICAgfVxufTtcblxuW1xuICAgIFsnZGVmYXVsdCcsICdncmF5J10sXG4gICAgWydzdWNjZXNzJywgJ2dyZWVuJ10sXG4gICAgWyd3YXJuaW5nJywgJ3llbGxvdyddLFxuICAgIFsnZXJyb3InLCAncmVkJ11cbl0ubWFwKChbc3R5bGVUeXBlLCBjb2xvcl0pID0+IHtcbiAgICBzdHlsZU1hcFtzdHlsZVR5cGVdID0gc3R5bGVNYXBbY29sb3JdO1xufSk7XG5cbmNvbnN0IGZpbGxlZFN0eWxlTWFwID0ge1xuICAgIHB1cnBsZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNydcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfNydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfNydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1lFTExPV182JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9ZRUxMT1dfNydcbiAgICB9LFxuICAgIGN5YW46IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1JFRF82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9SRURfNydcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhmaWxsZWRTdHlsZU1hcCkubWFwKGtleSA9PiB7XG4gICAgY29uc3QgbWFwID0gZmlsbGVkU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWZpbGxlZCddID0ge1xuICAgICAgICAuLi5tYXAsXG4gICAgICAgIGJvcmRlcjogbWFwLmJnLFxuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEUnXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkKFN2Z0ljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgUHJlZml4SWNvbiA9IHN0eWxlZChJY29uKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBQcmVmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5jb25zdCBnZXRDb2xvck1hcCA9IChzdHlsZVR5cGUsIGRpc2FibGVkKSA9PiB7XG4gICAgaWYgKC8tZmlsbCQvLnRlc3Qoc3R5bGVUeXBlKSkge1xuICAgICAgICBzdHlsZVR5cGUgKz0gJ2VkJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0RJU0FCTEVEJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9ESVNBQkxFRF9MSUdIVCcsXG4gICAgICAgICAgICAgICAgICBiZzogJ1RfQ09MT1JfQkdfRElTQUJMRURfTElHSFQnLFxuICAgICAgICAgICAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHN0eWxlTWFwW3N0eWxlVHlwZV0pIHx8IHt9XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlXG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIGNvbnN0IGljb25Ib3ZlckJHID0gY3VzdG9tU3R5bGU/LmNsb3NlSWNvbkhvdmVyQmFja2dyb3VuZCB8fCBEVFtjb2xvck1hcC5pY29uSG92ZXJCR107XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuXG4gICAgICAgICAgICAke1ByZWZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtDbG9zZUljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMnB4IDJweCAwO1xuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmICdjdXJzb3I6IHBvaW50ZXInfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuXG4gICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtpY29uSG92ZXJCR307XG4gICAgICAgICAgICAgICAgICAgICAgICAke0Nsb3NlSWNvbn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBJY29uVGFnID0gc3R5bGVkKEljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuZXhwb3J0IGNvbnN0IEljb25UYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlID0gJ2RlZmF1bHQnLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBjdXN0b21TdHlsZVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMCBzb2xpZCAke2JnfTtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDVweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnR3JvdXBXcmFwcGVyID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY29tcGFjdCB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhY3RcbiAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTRweDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */")), ";}::after{background:", border, ";};label:TagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagWrapper = TagWrapper;
var ContentWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx5",
  label: "ContentWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvTzRDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9JY29uJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGFnJztcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gX3ByZWZpeENscyArICctdGFnLWljb24nO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVNYXAgPSB7XG4gICAgZ3JheToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19OT1RJQ0VfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfTk9USUNFX0RBUksnXG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX1NVQ0NFU1NfTElHSFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfU1VDQ0VTU19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19TVUNDRVNTX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9XQVJOSU5HX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX1dBUk5JTkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfV0FSTklOR19EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0VSUk9SX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0VSUk9SX0RBUksnXG4gICAgfSxcbiAgICBwcmltYXJ5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9QUklNQVJZX0RFRkFVTFQnLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfUFJJTUFSWV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX1BSSU1BUllfMidcbiAgICB9LFxuICAgIHB1cnBsZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfUFVSUExFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNSdcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV81JyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MRUdFTkRfTElHSFRCTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNSdcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfMScsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9MRUdFTkRfQkxVRV81J1xuICAgIH0sXG4gICAgb3JhbmdlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzUnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzEnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV81J1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNScsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fMicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9MRUdFTkRfQ1lBTl8xJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzUnXG4gICAgfVxufTtcblxuW1xuICAgIFsnZGVmYXVsdCcsICdncmF5J10sXG4gICAgWydzdWNjZXNzJywgJ2dyZWVuJ10sXG4gICAgWyd3YXJuaW5nJywgJ3llbGxvdyddLFxuICAgIFsnZXJyb3InLCAncmVkJ11cbl0ubWFwKChbc3R5bGVUeXBlLCBjb2xvcl0pID0+IHtcbiAgICBzdHlsZU1hcFtzdHlsZVR5cGVdID0gc3R5bGVNYXBbY29sb3JdO1xufSk7XG5cbmNvbnN0IGZpbGxlZFN0eWxlTWFwID0ge1xuICAgIHB1cnBsZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1BVUlBMRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9QVVJQTEVfNydcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX0xJR0hUQkxVRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9MSUdIVEJMVUVfNydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9CTFVFXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0JMVUVfNydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX09SQU5HRV82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9PUkFOR0VfNydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1lFTExPV182JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9ZRUxMT1dfNydcbiAgICB9LFxuICAgIGN5YW46IHtcbiAgICAgICAgYmc6ICdUX0NPTE9SX0xFR0VORF9DWUFOXzYnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfTEVHRU5EX0NZQU5fNydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBiZzogJ1RfQ09MT1JfTEVHRU5EX1JFRF82JyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0xFR0VORF9SRURfNydcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhmaWxsZWRTdHlsZU1hcCkubWFwKGtleSA9PiB7XG4gICAgY29uc3QgbWFwID0gZmlsbGVkU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWZpbGxlZCddID0ge1xuICAgICAgICAuLi5tYXAsXG4gICAgICAgIGJvcmRlcjogbWFwLmJnLFxuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEUnXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkKFN2Z0ljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgUHJlZml4SWNvbiA9IHN0eWxlZChJY29uKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBQcmVmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5jb25zdCBnZXRDb2xvck1hcCA9IChzdHlsZVR5cGUsIGRpc2FibGVkKSA9PiB7XG4gICAgaWYgKC8tZmlsbCQvLnRlc3Qoc3R5bGVUeXBlKSkge1xuICAgICAgICBzdHlsZVR5cGUgKz0gJ2VkJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX0RJU0FCTEVEJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9ESVNBQkxFRF9MSUdIVCcsXG4gICAgICAgICAgICAgICAgICBiZzogJ1RfQ09MT1JfQkdfRElTQUJMRURfTElHSFQnLFxuICAgICAgICAgICAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHN0eWxlTWFwW3N0eWxlVHlwZV0pIHx8IHt9XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlXG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIGNvbnN0IGljb25Ib3ZlckJHID0gY3VzdG9tU3R5bGU/LmNsb3NlSWNvbkhvdmVyQmFja2dyb3VuZCB8fCBEVFtjb2xvck1hcC5pY29uSG92ZXJCR107XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuXG4gICAgICAgICAgICAke1ByZWZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtDbG9zZUljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMnB4IDJweCAwO1xuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmICdjdXJzb3I6IHBvaW50ZXInfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuXG4gICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtjb2xvcn07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtpY29uSG92ZXJCR307XG4gICAgICAgICAgICAgICAgICAgICAgICAke0Nsb3NlSWNvbn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBJY29uVGFnID0gc3R5bGVkKEljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuZXhwb3J0IGNvbnN0IEljb25UYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlID0gJ2RlZmF1bHQnLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBjdXN0b21TdHlsZVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ym9yZGVyfTtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMCBzb2xpZCAke2JnfTtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDVweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnR3JvdXBXcmFwcGVyID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY29tcGFjdCB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhY3RcbiAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTRweDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */");
exports.ContentWrapper = ContentWrapper;
var IconTag = ( /*#__PURE__*/0, _styledBase.default)(_Icon.default, {
  target: "e19zfbcx6",
  label: "IconTag"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.IconTag = IconTag;
var IconTagWrapper = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx7",
  label: "IconTagWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var _props$styleType = props.styleType,
      styleType = _props$styleType === void 0 ? 'default' : _props$styleType,
      DT = props.theme.designTokens,
      disabled = props.disabled,
      customStyle = props.customStyle;
  var colorMap = getColorMap(styleType, disabled);
  var color = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.color) || DT[colorMap.color];
  var bg = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.background) || DT[colorMap.bg];
  var border = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.borderColor) || DT[colorMap.border];
  return /*#__PURE__*/(0, _core.css)("box-sizing:border-box;height:20px;width:20px;line-height:18px;text-align:center;display:inline-block;border-radius:2px;position:relative;border:1px solid ", border, ";color:", color, ";background:", bg, ";::after{position:absolute;right:-1px;background:", border, ";box-sizing:border-box;border:0 solid ", bg, ";border-width:5px 0;};label:IconTagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.IconTagWrapper = IconTagWrapper;
var TagGroupWrapper = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e19zfbcx8",
  label: "TagGroupWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var compact = props.compact;
  return compact ? /*#__PURE__*/(0, _core.css)("margin-bottom:-4px;.", prefixCls, ",.", iconCls, "{border-left-style:none;border-right-style:none;border-radius:0;vertical-align:middle;margin-bottom:4px;:first-of-type{border-left-style:solid;border-top-left-radius:2px;border-bottom-left-radius:2px;}:after{content:' ';height:8px;width:1px;margin:5px 0;display:inline-block;vertical-align:middle;}:last-of-type{border-right-style:solid;border-top-right-radius:2px;border-bottom-right-radius:2px;::after{height:100%;content:none;}}}.", iconCls, "{border-right-style:solid;:after{margin:0;height:100%;}}.", prefixCls, "{padding-left:4px;:first-of-type{padding-left:8px;}", ContentWrapper, "{margin-right:4px;}:last-of-type{", ContentWrapper, "{margin-right:8px;}}};label:TagGroupWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : /*#__PURE__*/(0, _core.css)("margin-bottom:-4px;.", prefixCls, ",.", iconCls, "{margin-right:4px;margin-bottom:4px;vertical-align:middle;};label:TagGroupWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagGroupWrapper = TagGroupWrapper;